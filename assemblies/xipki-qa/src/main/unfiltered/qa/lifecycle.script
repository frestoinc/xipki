WAIT_TOMCAT_START_TIME = 3

printUsage = "false"
argsValid = "false"
errMsg = ""

if { "$1" equals "" | "$1" equals "help" } then {
  printUsage = "true"
  argsValid = "true"
} else {
  if { "$1" equals "-l" } then {
    OUTFORM = $2
    HASH = $3
    TOKEN_TYPE = $4
    SIG_TYPE = $5
    KEYSPEC = $6
  } else {
    OUTFORM = $1
    HASH = $2
    TOKEN_TYPE = $3
    SIG_TYPE = $4
    KEYSPEC = $5
  }

  argsValid = $([pkcs11 pkcs12] contains $TOKEN_TYPE)

  if { "$argsValid" equals "false" } then {
    errMsg = "invalid TOKEN_TYPE $TOKEN_TYPE"
  } else {
    argsValid = $([rsa rsapss ec plainec dsa sm2] contains $SIG_TYPE)
    if { "$argsValid" equals "false" } then {
      errMsg = "invalid SIG_TYPE $SIG_TYPE"
    }
  }

  if { "$argsValid" equals "true" } then {
    argsValid = "false"
    if { "$SIG_TYPE" equals "plainec" } then {
      argsValid = $([sha1 sha256 sha384 sha512] contains $HASH)
    } elif { "$SIG_TYPE" equals "sm2" } then {
      argsValid = $([sm3] contains $HASH)
    } elif { "$SIG_TYPE" equals "rsa" } then {
      argsValid = $([sha1 sha256 sha384 sha512 sha3-224 sha3-256 sha3-384 sha3-512] contains $HASH)
    } elif { "$SIG_TYPE" equals "dsa" } then {
      argsValid = $([sha1 sha256 sha384 sha512 sha3-224 sha3-256 sha3-384 sha3-512] contains $HASH)
    } else {
      # ec and rsapss
      argsValid = $([sha1 sha256 sha384 sha512 sha3-224 sha3-256 sha3-384 sha3-512 shake128 shake256] contains $HASH)
    }

    if { "$argsValid" equals "false" } then {
      errMsg = "invalid HASH $HASH"
    }

  }
}

if { "$argsValid" equals "false" } then {
  echo "$errMsg"
  echo ""
  printUsage = "true"
}

if { "$printUsage" equals "true" } then {
  echo "Usage: "
  echo ""
  echo "source file:./qa/lifecycle.script [option] <outform> <hash algo> <token type> <signature type> [<keyspec>]"
  echo "    outform:         Output format of the certificates, CRLs and CSRs"
  echo "    hash algo:       sha1, sha224, sha256, sha384, sha512"
  echo "                     sha3-224, sha3-256, sha3-384, sha3-512"
  echo "                     shake128, shake256 (for signature types rsapss and ec)"
  echo "                     sm3 (for signature type sm2)"
  echo "                     The sha3 algorithms are not for plainec."
  echo "    token type:      pkcs11, pkcs12"
  echo "    signature type:  rsa, rsapss, ec, plainec, dsa, sm2"
  echo "    keyspec:         keysize for signature types rsa, rsapss and dsa,"
  echo "                     curve name for signature types ec and plainec"
  echo "options"
  echo "    -l               configure CAs using command 'load-conf'"
} else {
  source file:./qa/qa.d/prepare-keys.script

  ## Prepare OCSP responder configuration
  xi:copy-file -f \
    xipki/etc/ocsp/template.ocsp-responder.json \
    xipki/etc/ocsp/ocsp-responder.json

  xi:replace --old "REPLACEME-TOKENTYPE" --new "$TOKEN_TYPE" \
    --old "REPLACEME-TOKENKEY" --new "$OCSP_KEYCONF" \
    --old "REPLACEME-SIGALGO" --new "$SIGALGO" \
    xipki/etc/ocsp/ocsp-responder.json

  ## Prepare scripts
  xi:copy-file -f qa/template.rest0.script qa/rest0.script

  xi:copy-file -f qa/template.est0.script  qa/est0.script

  xi:copy-file -f qa/qa.d/template.ca-load.script \
    qa/qa.d/ca-load.script

  xi:copy-file -f qa/qa.d/template.ca.script \
    qa/qa.d/ca.script

  xi:copy-file -f qa/qa.d/template.ra.script \
    qa/qa.d/ra.script

  dsaPlain = ""

  if { "$SIG_TYPE" equals "plainec" } then {
    dsaPlain = "--dsa-plain"
  }

  xi:replace --old "REPLACEME-DSAPLAIN" --new "${dsaPlain}" \
    qa/qa.d/ca-load.script \
    qa/qa.d/ca.script \
    qa/qa.d/ra.script

  rsaPss = ""
  if { "$SIG_TYPE" equals "rsapss" } then {
    rsaPss = "--rsa-pss"
  }

  xi:replace --old "REPLACEME-RSAPSS" --new "${rsaPss}" \
    qa/qa.d/ca-load.script \
    qa/rest0.script \
    qa/est0.script \
    qa/qa.d/ca.script \
    qa/qa.d/ra.script

  if { "$1" equals "-l" } then {
    source file:./qa/qa.d/ca-load.script
  } else {
    source file:./qa/qa.d/ca.script
  }

  source file:./qa/qa.d/scep-server.script

  echo "#################################################################"
  echo "#                  CA certificate commands                      #"
  echo "#################################################################"

  #### list certs ####

  ca:list-cert --ca rootca1 --subject "O=myorg,CN=*ca*" --order subject -n 100

  source file:./qa/qa.d/ra.script

  source file:./qa/ca-qa.script

  source file:./qa/rest.script

  source file:./qa/est.script

  echo "#################################################################"
  echo "#                              CRL                              #"
  echo "#################################################################"

  echo "generate new CRL"
  ca:gen-crl --ca subcawithcrl1 --out output/subcawithcrl1.crl

  # Copy the configuration of OCSP responder
  xi:copy-file -f \
    xipki/etc/ocsp/ocsp-responder.json \
    ${OCSP_XIPKI_DIR}/etc/ocsp/ocsp-responder.json

  xi:copy-file -f output/ocsp99.crt \
      ${OCSP_XIPKI_DIR}/keycerts/ocsp.crt

  if { "$TOKEN_TYPE" equals "pkcs12" } then {
    xi:copy-file -f output/ocsp99.p12 \
      ${OCSP_XIPKI_DIR}/keycerts/ocsp99.p12
  }

  xi:rm -r -f ${OCSP_XIPKI_DIR}/crls/example-crls

  xi:copy-dir ${OCSP_XIPKI_DIR}/crls/template \
    ${OCSP_XIPKI_DIR}/crls/example-crls

  # CRL will be provided via out-of-band mechanism

  xi:rm -f ${OCSP_XIPKI_DIR}/crls/example-crls/crl-provided-mycrl1/REVOCATION

  xi:copy-file -f output/subcawithcrl1.crt \
    ${OCSP_XIPKI_DIR}/crls/example-crls/crl-provided-mycrl1/ca.crt

  xi:copy-file -f output/subcawithcrl1.crl \
    ${OCSP_XIPKI_DIR}/crls/example-crls/crl-provided-mycrl1/ca.crl

  # CRL will be downloaded by the OCSP responder
  xi:rm -f ${OCSP_XIPKI_DIR}/crls/example-crls/crl-download-mycrl2/REVOCATION

  xi:copy-file -f output/rootca1.crt \
    ${OCSP_XIPKI_DIR}/crls/example-crls/crl-download-mycrl2/ca.crt

  xi:copy-file -f qa/qa.d/rootca.crl.download \
    ${OCSP_XIPKI_DIR}/crls/example-crls/crl-download-mycrl2/crl.download

  echo "Restart ocsp (tomcat) server!"
  xi:exec $[tomcat.java.home] '~/test/xipki/ocsp-tomcat/bin/shutdown.sh'
  xi:exec $[tomcat.java.home] '~/test/xipki/ocsp-tomcat/bin/startup.sh'
  sleep 3

  source file:./qa/ocsp.script

  echo "shutdown tomcats"
  xi:exec $[tomcat.java.home] '~/test/xipki/ca-tomcat/bin/shutdown.sh'
  xi:exec $[tomcat.java.home] '~/test/xipki/ocsp-tomcat/bin/shutdown.sh'
  xi:exec $[tomcat.java.home] '~/test/xipki/gateway-tomcat/bin/shutdown.sh'

}
